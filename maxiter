#!/usr/bin/env php
<?php
// require __DIR__ . "/app/models/LoadModel.php";

class MaxiterConfiguration
{
    public function generateController($fileName)
    {
        $path = __DIR__ . '/app/controllers/' . $fileName . ".php";

        // Content to be written to the file
        $content = "<?php\n" .
            "/*\n" .
            "The controller file handles user input and interaction. It processes requests,\n" .
            "invokes business logic, and updates the model as needed.\n" .
            "\n" .
            "@author Victor Béser\n" .
            "*/\n" .
            "require __DIR__ . '/../models/LoadModel.php';\n" .
            "require __DIR__ . '/../models/SecureRequestModel.php';\n\n" .
            "class " . ucfirst($fileName) . " {\n\n" .
            "    public function main() {\n" .
            "        // Your code here\n" .
            "    }\n\n" .
            "}\n\n" .
            "\$controller = new " . ucfirst($fileName) . "();\n" .
            "(isset(\$_POST['controller']) && !empty(\$_POST['controller'])) ? \$controller->{\$_POST['controller']}() : \$controller->main();\n";

        // Create the /app directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app');
        // Create the /app/controllers directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app/controllers');

        // Check if the file already exists
        if (file_exists($path)) {
            echo "This controller already exists\n";
        } else {
            // Create the file and write the content
            file_put_contents($path, $content);
            echo "Controller $fileName created\n";
        }
    }

    public function generatePage($fileName, $baseContent = null)
    {
        $path = __DIR__ . '/resources/views/pages/' . $fileName . '/' . $fileName . ".php";
        $cssPath = __DIR__ . '/resources/views/pages/' . $fileName . '/css/' . $fileName . '.css';
        $jsPath = __DIR__ . '/resources/views/pages/' . $fileName . '/js/' . $fileName . '.js';

        // Content to be written to the PHP file
        if ($baseContent == null) {
            $content =
                "<!-- \n" .
                "This is your new page, it's already routed in Maxiter application\n" .
                "and everything you need is included here.\n" .
                "Happy Coding!\n" .
                "\n" .
                "@author Victor Béser\n" .
                "-->\n" .
                '<?php include __DIR__ . "/../_header/header.php"; ?>' . "\n" .
                "<!-- Page Title -->\n" .
                '<?php PagesTitleModel::title("Maxiter - ' . ucfirst($fileName) . '"); ?>' . "\n" .
                '<link rel="stylesheet" href="<?php echo EnvModel::env("APP_BASE_URL") ?>/resources/views/pages/' . $fileName . '/css/' . $fileName . '.css">' . "\n" .
                "<!--**********************************\n" .
                "        Main wrapper start\n" .
                "***********************************-->\n" .
                '<div id="main-wrapper">' . "\n" .
                "\n" .
                "    <!-- NAVBAR -->\n" .
                '    <?php include __DIR__ . "/../_navbar/navbar.php"; ?>' . "\n" .
                "    <!-- NAVBAR -->\n" .
                "\n" .
                "    <!-- SIDEBAR -->\n" .
                '    <?php include __DIR__ . "/../_sidenav/sidenav.php"; ?>' . "\n" .
                "    <!-- SIDEBAR -->\n" .
                "\n" .
                "    <!--**********************************\n" .
                "            Content body start\n" .
                "        ***********************************-->\n" .
                '    <div class="content-body">' . "\n" .
                "        <!-- row -->\n" .
                "        <div class=\"container-fluid\">" . "\n" .
                "\n" .
                "            <!-- CARDS -->\n" .
                '            <?php include __DIR__ . "/../_cards/cards.php"; ?>' . "\n" .
                "            <!-- CARDS -->\n" .
                "\n" .
                "            <div class=\"row\">" . "\n" .
                "                <div class=\"col-xl-12 col-lg-8 col-md-8\">" . "\n" .
                "                    <div class=\"card\">" . "\n" .
                "                        <div class=\"card-header\">" . "\n" .
                "                            <h4 class=\"card-title\"><?php echo EnvModel::env(\"APP_NAME\") ?> - " . ucfirst($fileName) . "</h4>\n" .
                "                        </div>" . "\n" .
                "                        <div class=\"card-body\">" . "\n" .
                "                            <div class=\"row\">" . "\n" .
                "                                <div style=\"text-align:justify;\" class=\"col-xl-12 col-lg-8\">" . "\n" .
                "                                    <!-- CODE HERE HERE -->\n\n" .
                "                                </div>" . "\n" .
                "                            </div>" . "\n" .
                "                        </div>" . "\n" .
                "                    </div>" . "\n" .
                "                </div>" . "\n" .
                "\n" .
                "            </div>" . "\n" .
                "\n" .
                "        </div>" . "\n" .
                "    </div>" . "\n" .
                "    <!--**********************************\n" .
                "            Content body end\n" .
                "        ***********************************-->\n" .
                "\n" .
                "</div>" . "\n" .
                "<!--**********************************\n" .
                "        Main wrapper end\n" .
                "    ***********************************-->" . "\n" .
                "\n" .
                '<script src="<?php echo EnvModel::env("APP_BASE_URL") ?>resources/views/pages/' . $fileName . '/js/' . $fileName . '.js"></script>' . "\n" .
                '<?php include __DIR__ . "/../_footer/footer.php"; ?>'
            ;
        }


        $this->createDirectory(__DIR__ . '/resources');
        $this->createDirectory(__DIR__ . '/resources/views');
        $this->createDirectory(__DIR__ . '/resources/views/pages');
        $this->createDirectory(__DIR__ . '/resources/views/pages/' . $fileName . '/');
        $this->createDirectory(__DIR__ . '/resources/views/pages/' . $fileName . '/css/');
        $this->createDirectory(__DIR__ . '/resources/views/pages/' . $fileName . '/js/');

        // Check if the PHP file already exists
        if (file_exists($path)) {
            echo "This page already exists\n";
        } else {
            // Create the PHP file and write the content

            if ($baseContent == null) {
                file_put_contents($path, $content);

            } else if ($baseContent != null) {
                $indexFile = __DIR__ . "\\src\\template\\$baseContent\\index.html";

                // Check if the index file exists
                if (file_exists($indexFile)) {
                    // Read the content of index.html
                    $fileContent = file_get_contents($indexFile);

                    // Use regular expression to extract content between @header markers
                    if (preg_match('/@body(.*?)@body/s', $fileContent, $matches)) {
                        // $matches[1] will contain the content between the @header markers

                        // Create the body.php file and write the extracted content
                        $bodyFile = __DIR__ . "\\resources\\views\\pages\\$fileName\\$fileName.php";
                        if (file_put_contents($path, $matches[1])) {
                            echo "Page $fileName will be created using the index.html with @body tag as content.\n";
                        } else {
                            echo "Failed to create $fileName.php file.\n";
                        }
                    } else {
                        echo "No content found between @body markers.\n";
                    }
                } else {
                    echo "The index.html file does not exist.\n";
                }
            }

            echo "Page $fileName created\n";
        }

        // Content for the CSS file
        $cssContent = "/* Styles for $fileName page */\n";
        file_put_contents($cssPath, $cssContent);
        echo "CSS file $fileName.css created\n";

        // Content for the JS file
        $jsContent = "// JavaScript for $fileName page\n";
        file_put_contents($jsPath, $jsContent);
        echo "JS file $fileName.js created\n";

        // FINAL CONFIGURATIONS CHANGING TAGS WITH PATH VAR
        if ($baseContent != null) {
            // PAGE
            $page = __DIR__ . "\\resources\\views\\pages\\$fileName\\$fileName.php";
            // The content to prepend
            $preContent = "<?php include __DIR__ . '/../_header/header.php'; ?>\n
<!-- Page Title -->\n
<?php PagesTitleModel::title('Maxiter - $fileName Page'); ?>\n
<link rel='stylesheet' href='<?php echo EnvModel::env('APP_BASE_URL') ?>resources/views/pages/$fileName/css/$fileName.css'>\n";
            // Check if the $fileName.php file exists
            if (file_exists($page)) {
                // Read the current content of the file
                $currentContent = file_get_contents($page);

                // Prepend the new content to the existing content
                $newContent = $preContent . $currentContent;

                // Write the new content back to the file
                if (file_put_contents($page, $newContent)) {
                    echo "Successfully added the configuration at the beginning of $fileName.php.\n";
                } else {
                    echo "Failed to update $fileName.php.\n";
                }
            } else {
                echo "The $fileName.php file does not exist.\n";
            }
            // The content to append
            $appendContent = "<script src='<?php echo EnvModel::env('APP_BASE_URL') ?>resources/views/pages/$fileName/js/$fileName.js'></script>\n
<?php include __DIR__ . '/../_footer/footer.php'; ?>";

            // Check if the $fileName.php file exists
            if (file_exists($page)) {
                // Read the current content of the file
                $currentContent = file_get_contents($page);

                // Append the new content to the existing content
                $newContent = $currentContent . $appendContent;

                // Write the new content back to the file
                if (file_put_contents($page, $newContent)) {
                    echo "Successfully added the configuration at the end of $fileName.php.\n";
                } else {
                    echo "Failed to update $fileName.php.\n";
                }
            } else {
                echo "The $fileName.php file does not exist.\n";
            }

            // All SRC or URL IMAGE HOMEPAGE
            // Check if the home.php file exists
            if (file_exists($page)) {
                // Read the current content of the file
                $content = file_get_contents($page);

                // Regular expression to find and modify img src paths
                $content = preg_replace_callback('/<img[^>]*src=["\']([^"\']+)["\']/i', function ($matches) {
                    $originalSrc = $matches[1];  // The original src value
                    // Check if the path is relative (i.e., not starting with "http" or "//")
                    if (strpos($originalSrc, 'http') === false && strpos($originalSrc, '//') === false) {
                        // Prepend the base URL and resources/views/ to the src path
                        $modifiedSrc = '<?php echo EnvModel::env(\'APP_BASE_URL\') ?>resources/views/' . $originalSrc;
                        return str_replace($originalSrc, $modifiedSrc, $matches[0]);
                    }
                    // If the src is already an absolute URL, return it unchanged
                    return $matches[0];
                }, $content);

                // Regular expression to find and modify background-image url() paths
                $content = preg_replace_callback('/background-image:\s*url\(["\']?([^"\')]+)["\']?\)/i', function ($matches) {
                    $originalUrl = $matches[1];  // The original URL in the background-image
                    // Check if the path is relative
                    if (strpos($originalUrl, 'http') === false && strpos($originalUrl, '//') === false) {
                        // Prepend the base URL and resources/views/ to the background-image URL
                        $modifiedUrl = 'url(<?php echo EnvModel::env(\'APP_BASE_URL\') ?>resources/views/' . $originalUrl . ')';
                        // Replace only the part inside the url() function with the modified URL
                        return preg_replace('/url\(["\']?([^"\')]+)["\']?\)/', $modifiedUrl, $matches[0]);
                    }
                    // If the URL is already absolute, return it unchanged
                    return $matches[0];
                }, $content);

                // Regular expression to find and modify img src paths
                $content = preg_replace_callback('/<source[^>]*src=["\']([^"\']+)["\']/i', function ($matches) {
                    $originalSrc = $matches[1];  // The original src value
                    // Check if the path is relative (i.e., not starting with "http" or "//")
                    if (strpos($originalSrc, 'http') === false && strpos($originalSrc, '//') === false) {
                        // Prepend the base URL and resources/views/ to the src path
                        $modifiedSrc = '<?php echo EnvModel::env(\'APP_BASE_URL\') ?>resources/views/' . $originalSrc;
                        return str_replace($originalSrc, $modifiedSrc, $matches[0]);
                    }
                    // If the src is already an absolute URL, return it unchanged
                    return $matches[0];
                }, $content);

                // Write the modified content back to the file
                if (file_put_contents($page, $content)) {
                    echo "Successfully updated the src and background-image paths in $fileName.php.\n";
                } else {
                    echo "Failed to update the $fileName.php file.\n";
                }

            } else {
                echo "The $fileName.php file does not exist.\n";
            }
        }

        echo "Note that this is not 100% perfect due the massive exceptions we get when different types of devs create different templates many different ways, please check out the src, href, and stuff.";
    }

    public function generateModel($fileName)
    {
        $path = __DIR__ . '/app/models/' . $fileName . ".php";

        // Content to be written to the file
        $content = "<?php\n" .
            "/*\n" .
            "The model represents the application's data and business logic. It manages data retrieval, \n" .
            "storage, and manipulation, often interacting with the database. \n" .
            "The model encapsulates rules and validation to ensure data integrity.\n" .
            "\n" .
            "@author Victor Béser\n" .
            "*/\n" .
            "class " . ucfirst($fileName) . " {\n\n" .
            "    public static function main() {\n" .
            "        // Your code here\n" .
            "    }\n\n" .
            "}";

        // Create the /app directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app');
        // Create the /app/models directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app/models');

        // Check if the file already exists
        if (file_exists($path)) {
            echo "This model already exists\n";
        } else {
            // Create the file and write the content
            file_put_contents($path, $content);
            echo "Model $fileName created\n";
        }
    }

    public function generateLogModel($database)
    {
        $path = __DIR__ . '/app/models/LogModel.php';

        if (!isset($database) || empty($database)) {
            echo "Error: php maxiter new log [database]";
            exit();
        }

        // Content to be written to the file
        $content = "<?php\n" .
            "/*\n" .
            "This is the log file, use it statically where you want using LogModel::log(\"Your log text here\")\n" .
            "\n" .
            "@author Victor Béser\n" .
            "*/\n" .
            "class LogModel {\n\n" .
            "    private static \$log;\n" .
            "    public static function log(\$log) {\n" .
            "        \$currentDateTime = new DateTime();\n" .
            "        \$formattedDateTime = \$currentDateTime->format('Y-m-d H:i:s');\n\n" .
            "        self::\$log = mb_strtoupper(\$log);\n\n" .
            "        \$query = \"INSERT INTO logs (log, created_at) VALUES (:log, :date)\";\n" .
            "        \$result = DatabaseModel::connection(\"$database\")->execute(\$query, [\n" .
            "            \":log\" => self::\$log,\n" .
            "            \":date\" => \$formattedDateTime,\n" .
            "        ]);\n" .
            "    }\n\n" .
            "}";

        // Create the /app directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app');
        // Create the /app/models directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app/models');

        // Check if the file already exists
        if (file_exists($path)) {
            echo "This model already exists\n";
        } else {
            // Create the file and write the content
            file_put_contents($path, $content);
            echo "LogModel with database '$database' created\n";
        }
    }

    public function generateSQL($table)
    {

        $path = __DIR__ . '/src/tables/' . $table . '.sql';

        switch ($table) {

            case 'users':
                $content = "-- Create the users table\n" .
                    "CREATE TABLE users (\n" .
                    "    id INT AUTO_INCREMENT PRIMARY KEY,\n" .
                    "    username VARCHAR(50) NOT NULL UNIQUE,\n" .
                    "    password VARCHAR(255) NOT NULL,\n" .
                    "    email VARCHAR(100) NOT NULL UNIQUE,\n" .
                    "    first_name VARCHAR(50),\n" .
                    "    last_name VARCHAR(50),\n" .
                    "    phone_number VARCHAR(15),\n" .
                    "    address VARCHAR(255),\n" .
                    "    city VARCHAR(50),\n" .
                    "    state VARCHAR(50),\n" .
                    "    zip_code VARCHAR(10),\n" .
                    "    country VARCHAR(50),\n" .
                    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n" .
                    "    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n" .
                    ");\n\n" .
                    "-- Insert data into the users table\n" .
                    "INSERT INTO users (username, password, email, first_name, last_name, phone_number, address, city, state, zip_code, country) VALUES\n" .
                    "('johndoe', MD5('password123'), 'johndoe@example.com', 'John', 'Doe', '1234567890', '123 Main St', 'Anytown', 'Anystate', '12345', 'USA'),\n" .
                    "('janedoe', MD5('mypassword'), 'janedoe@example.com', 'Jane', 'Doe', '0987654321', '456 Elm St', 'Othertown', 'Otherstate', '54321', 'USA'),\n" .
                    "('alice', MD5('alicepassword'), 'alice@example.com', 'Alice', 'Smith', '1112223333', '789 Maple Ave', 'Sometown', 'Somestate', '67890', 'USA'),\n" .
                    "('bob', MD5('bobpassword'), 'bob@example.com', 'Bob', 'Johnson', '4445556666', '321 Oak St', 'Differenttown', 'Differentstate', '09876', 'USA');";
                break;

            case 'logs':
                $content = "-- Create the logs table\n" .
                    "CREATE TABLE logs (\n" .
                    "    id INT AUTO_INCREMENT PRIMARY KEY,\n" .
                    "    log TEXT NOT NULL,\n" .
                    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n" .
                    ");\n\n" .
                    "-- Insert data into the logs table\n" .
                    "INSERT INTO logs (log) VALUES\n" .
                    "('User johndoe logged in successfully'),\n" .
                    "('User janedoe attempted to access restricted area'),\n" .
                    "('User alice updated profile information'),\n" .
                    "('User bob logged out');";
                break;


            case 'products':
                $content = "-- Create the products table\n" .
                    "CREATE TABLE products (\n" .
                    "    id INT AUTO_INCREMENT PRIMARY KEY,\n" .
                    "    name VARCHAR(100) NOT NULL,\n" .
                    "    description TEXT,\n" .
                    "    price DECIMAL(10, 2) NOT NULL,\n" .
                    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n" .
                    "    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n" .
                    ");\n\n" .
                    "-- Insert data into the products table\n" .
                    "INSERT INTO products (name, description, price) VALUES\n" .
                    "('Product 1', 'Description for Product 1', 19.99),\n" .
                    "('Product 2', 'Description for Product 2', 29.99),\n" .
                    "('Product 3', 'Description for Product 3', 39.99),\n" .
                    "('Product 4', 'Description for Product 4', 49.99);";
                break;

            case 'orders':
                $content = "-- Create the orders table\n" .
                    "CREATE TABLE orders (\n" .
                    "    id INT AUTO_INCREMENT PRIMARY KEY,\n" .
                    "    user_id INT NOT NULL,\n" .
                    "    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n" .
                    "    status VARCHAR(50) NOT NULL,\n" .
                    "    total DECIMAL(10, 2) NOT NULL,\n" .
                    "    FOREIGN KEY (user_id) REFERENCES users(id)\n" .
                    ");\n\n" .
                    "-- Insert data into the orders table\n" .
                    "INSERT INTO orders (user_id, status, total) VALUES\n" .
                    "(1, 'Pending', 59.98),\n" .
                    "(2, 'Completed', 29.99),\n" .
                    "(1, 'Shipped', 39.99),\n" .
                    "(3, 'Cancelled', 19.99);";
                break;

            case 'customers':
                $content = "-- Create the customers table\n" .
                    "CREATE TABLE customers (\n" .
                    "    id INT AUTO_INCREMENT PRIMARY KEY,\n" .
                    "    name VARCHAR(100) NOT NULL,\n" .
                    "    email VARCHAR(100) NOT NULL UNIQUE,\n" .
                    "    phone_number VARCHAR(15),\n" .
                    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n" .
                    "    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n" .
                    ");\n\n" .
                    "-- Insert data into the customers table\n" .
                    "INSERT INTO customers (name, email, phone_number) VALUES\n" .
                    "('Alice Smith', 'alice@example.com', '1234567890'),\n" .
                    "('Bob Johnson', 'bob@example.com', '0987654321'),\n" .
                    "('Charlie Brown', 'charlie@example.com', '5551234567'),\n" .
                    "('Diana Prince', 'diana@example.com', '4449876543');";
                break;

            case 'roles':
                $content = "-- Create the roles table\n" .
                    "CREATE TABLE roles (\n" .
                    "    id INT AUTO_INCREMENT PRIMARY KEY,\n" .
                    "    role_name VARCHAR(50) NOT NULL UNIQUE,\n" .
                    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n" .
                    "    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n" .
                    ");\n\n" .
                    "-- Insert data into the roles table\n" .
                    "INSERT INTO roles (role_name) VALUES\n" .
                    "('Admin'),\n" .
                    "('Editor'),\n" .
                    "('Viewer'),\n" .
                    "('Guest');";
                break;

            case 'permissions':
                $content = "-- Create the permissions table\n" .
                    "CREATE TABLE permissions (\n" .
                    "    id INT AUTO_INCREMENT PRIMARY KEY,\n" .
                    "    permission_name VARCHAR(50) NOT NULL UNIQUE,\n" .
                    "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n" .
                    "    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n" .
                    ");\n\n" .
                    "-- Insert data into the permissions table\n" .
                    "INSERT INTO permissions (permission_name) VALUES\n" .
                    "('Create'),\n" .
                    "('Read'),\n" .
                    "('Update'),\n" .
                    "('Delete');";
                break;

            default:
                $content = "-- Create the $table table\n" .
                    "CREATE TABLE $table (\n" .
                    "    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL\n" .
                    ");";
                break;
        }


        // Create the /app directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/src');
        // Create the /app/models directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/src/tables');

        // Check if the file already exists
        if (file_exists($path)) {
            echo "This table already exists\n";
        } else {
            // Create the file and write the content
            file_put_contents($path, $content);
            echo "Table '$table' created in path /src/tables/\n";
        }

    }

    public function initServer($port = null)
    {
        if ($port === null) {
            $url = "http://localhost:7000";  // A URL que você quer abrir

            if (strncasecmp(PHP_OS, 'WIN', 3) == 0) {
                // Windows: usa o comando 'start' para abrir a URL
                exec("start " . $url);
            } elseif (strncasecmp(PHP_OS, 'Linux', 5) == 0) {
                // Linux: usa o comando 'xdg-open' para abrir a URL
                exec("xdg-open " . $url);
            } elseif (strncasecmp(PHP_OS, 'Darwin', 6) == 0) {
                // macOS: usa o comando 'open' para abrir a URL
                exec("open " . $url);
            } else {
                echo "Sistema operacional não suportado para abrir URLs automaticamente.";
            }
            exec("php -S localhost:7000");
        } else {
            $url = "http://localhost:$port";  // A URL que você quer abrir

            if (strncasecmp(PHP_OS, 'WIN', 3) == 0) {
                // Windows: usa o comando 'start' para abrir a URL
                exec("start " . $url);
            } elseif (strncasecmp(PHP_OS, 'Linux', 5) == 0) {
                // Linux: usa o comando 'xdg-open' para abrir a URL
                exec("xdg-open " . $url);
            } elseif (strncasecmp(PHP_OS, 'Darwin', 6) == 0) {
                // macOS: usa o comando 'open' para abrir a URL
                exec("open " . $url);
            } else {
                echo "Sistema operacional não suportado para abrir URLs automaticamente.";
            }
            exec("php -S localhost:$port");
        }
    }

    public function initGUI()
    {
        $env = parse_ini_file("./env.ini", true);
        $path = $env["app"]["APP_BASE_URL"];
        echo "Do not forget to set your correct app base url using ' php maxiter path [path] ', using: $path";
        exec("start $path" . "gui.html");
    }
    public function setPath($pathUrl)
    {
        $env_ini = './env.ini';
        $lines = file($env_ini, FILE_IGNORE_NEW_LINES);
        foreach ($lines as $key => $line) {
            if (strpos($line, 'APP_BASE_URL') !== false) {
                $lines[$key] = 'APP_BASE_URL="' . $pathUrl . '"';
                break;
            }
        }

        $path_js = './path.js';
        $lines_js = file($path_js, FILE_IGNORE_NEW_LINES);
        foreach ($lines_js as $key => $line) {
            if (strpos($line, 'APP_BASE_URL') !== false) {
                $lines_js[$key] = 'APP_BASE_URL:"' . $pathUrl . '"';
                break;
            }
        }
        file_put_contents($env_ini, implode(PHP_EOL, $lines));
        file_put_contents($path_js, implode(PHP_EOL, $lines_js));
        echo "New project base url set: $pathUrl";
    }


    // ############################################################################ //
    // ############################################################################ //
    // ############################ SET NEW TEMPLATE ############################## //
    // ############################################################################ //
    // ############################################################################ //

    public function setNewTemplate($templateFolder)
    {
        // Folder paths
        $viewsFolder = __DIR__ . "\\resources\\views";  // Destination folder
        $templateFolder = __DIR__ . "\\src\\template\\$templateFolder";  // Template source folder
        $indexFile = $templateFolder . "\\index.html";

        // Remove the views folder if it exists
        echo "Removing views folder...\n";
        if (is_dir($viewsFolder)) {
            // Check if the system is Windows or Unix-like (Linux/Mac)
            if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
                // Use the command to remove the folder on Windows
                exec("rd /s /q \"$viewsFolder\"");
            } else {
                // Use the command to remove the folder on Linux/Mac
                exec("rm -rf \"$viewsFolder\"");
            }
        } else {
            echo "Views folder not found.\n";
        }

        // Check if the folder was successfully removed
        if (!is_dir($viewsFolder)) {
            echo "Views folder removed successfully or not found.\n";
        } else {
            echo "Failed to remove views folder.\n";
        }

        // Recreate the views folder
        echo "Creating views folder...\n";
        if (mkdir($viewsFolder, 0777, true)) {
            echo "Views folder created successfully.\n";
        } else {
            echo "Failed to create views folder.\n";
            return;
        }

        // Check if the source folder exists
        if (is_dir($templateFolder)) {
            // Get the files from the template
            $files = scandir($templateFolder);

            // Iterate over the files in the source folder
            foreach ($files as $file) {
                // Ignore the entries "." and ".."
                if ($file != '.' && $file != '..') {
                    $sourcePath = $templateFolder . '\\' . $file; // Full path of the source file
                    $destinationPath = $viewsFolder . '\\' . $file; // Full path of the destination file

                    // Check if it's a directory (subfolder) and copy the subfolder and its files
                    if (is_dir($sourcePath)) {
                        // Create the subfolder in the destination, if it doesn't exist
                        if (!is_dir($destinationPath)) {
                            mkdir($destinationPath, 0777, true);
                        }
                        echo "Subfolder '$file' copied successfully!\n";

                        // Copy all files and subfolders within the subfolder
                        $this->copyDirectoryContents($sourcePath, $destinationPath);
                    }
                }
            }
        } else {
            echo "The source folder '$templateFolder' does not exist.\n";
        }


        // Create pages folder and subfolders
        $pagesFolder = __DIR__ . "\\resources\\views\\pages";
        echo "Creating pages folder...\n";
        if (mkdir($pagesFolder, 0777, true)) {
            echo "Pages folder created successfully.\n";
        } else {
            echo "Failed to create Pages folder.\n";
            return;
        }
        // _header
        $headerFolder = __DIR__ . "\\resources\\views\\pages\\_header";
        echo "Creating _header component...\n";
        if (!is_dir($headerFolder)) {
            if (mkdir($headerFolder, 0777, true)) {
                echo "_header component created successfully.\n";
            } else {
                echo "Failed to create _header component.\n";
            }
        } else {
            echo "_header component already exists.\n";
        }

        // _footer
        $footerFolder = __DIR__ . "\\resources\\views\\pages\\_footer";
        echo "Creating _footer component...\n";
        if (!is_dir($footerFolder)) {
            if (mkdir($footerFolder, 0777, true)) {
                echo "_footer component created successfully.\n";
            } else {
                echo "Failed to create _footer component.\n";
            }
        } else {
            echo "_footer component already exists.\n";
        }

        // _navbar
        $navbarFolder = __DIR__ . "\\resources\\views\\pages\\_navbar";
        echo "Creating _navbar component...\n";
        if (!is_dir($navbarFolder)) {
            if (mkdir($navbarFolder, 0777, true)) {
                echo "_navbar component created successfully.\n";
            } else {
                echo "Failed to create _navbar component.\n";
            }
        } else {
            echo "_navbar component already exists.\n";
        }

        // _sidebar
        $sidebarFolder = __DIR__ . "\\resources\\views\\pages\\_sidebar";
        echo "Creating _sidebar component...\n";
        if (!is_dir($sidebarFolder)) {
            if (mkdir($sidebarFolder, 0777, true)) {
                echo "_sidebar component created successfully.\n";
            } else {
                echo "Failed to create _sidebar component.\n";
            }
        } else {
            echo "_sidebar component already exists.\n";
        }

        // home
        $homeFolder = __DIR__ . "\\resources\\views\\pages\\home";
        echo "Creating home folder...\n";
        if (!is_dir($homeFolder)) {
            if (mkdir($homeFolder, 0777, true)) {
                echo "Home folder created successfully.\n";
            } else {
                echo "Failed to create Home folder.\n";
            }
        } else {
            echo "Home folder already exists.\n";
        }

        // Creating files and content
        // Path to the index.html template file
        // $indexFile = $templateFolder . "\\index.html";

        // _header folder path
        $headerFolder = __DIR__ . "\\resources\\views\\pages\\_header";

        // Check if the index file exists
        if (file_exists($indexFile)) {
            // Read the content of index.html
            $fileContent = file_get_contents($indexFile);

            // Use regular expression to extract content between @header markers
            if (preg_match('/@header(.*?)@header/s', $fileContent, $matches)) {
                // $matches[1] will contain the content between the @header markers

                // Create the _header folder if it doesn't exist
                if (!is_dir($headerFolder)) {
                    if (mkdir($headerFolder, 0777, true)) {
                        echo "_header folder created successfully.\n";
                    } else {
                        echo "Failed to create _header folder.\n";
                    }
                }

                // Create the header.php file and write the extracted content
                $headerFile = $headerFolder . "\\header.php";
                if (file_put_contents($headerFile, $matches[1])) {
                    echo "header.php file created successfully inside the _header folder.\n";
                } else {
                    echo "Failed to create header.php file.\n";
                }
            } else {
                echo "No content found between @header markers.\n";
            }
        } else {
            echo "The index.html file does not exist.\n";
        }



        // _footer folder path
        $footerFolder = __DIR__ . "\\resources\\views\\pages\\_footer";

        // Check if the index file exists
        if (file_exists($indexFile)) {
            // Read the content of index.html
            $fileContent = file_get_contents($indexFile);

            // Use regular expression to extract content between @header markers
            if (preg_match('/@footer(.*?)@footer/s', $fileContent, $matches)) {
                // $matches[1] will contain the content between the @header markers

                // Create the _header folder if it doesn't exist
                if (!is_dir($footerFolder)) {
                    if (mkdir($footerFolder, 0777, true)) {
                        echo "_footer folder created successfully.\n";
                    } else {
                        echo "Failed to create _footer folder.\n";
                    }
                }

                // Create the footer.php file and write the extracted content
                $footerFile = $footerFolder . "\\footer.php";
                if (file_put_contents($footerFile, $matches[1])) {
                    echo "footer.php file created successfully inside the _footer folder.\n";
                } else {
                    echo "Failed to create footer.php file.\n";
                }
            } else {
                echo "No content found between @footer markers.\n";
            }
        } else {
            echo "The index.html file does not exist.\n";
        }



        // _navbar folder path
        $navbarFolder = __DIR__ . "\\resources\\views\\pages\\_navbar";

        // Check if the index file exists
        if (file_exists($indexFile)) {
            // Read the content of index.html
            $fileContent = file_get_contents($indexFile);

            // Use regular expression to extract content between @header markers
            if (preg_match('/@navbar(.*?)@navbar/s', $fileContent, $matches)) {
                // $matches[1] will contain the content between the @header markers

                // Create the _header folder if it doesn't exist
                if (!is_dir($navbarFolder)) {
                    if (mkdir($navbarFolder, 0777, true)) {
                        echo "_navbar folder created successfully.\n";
                    } else {
                        echo "Failed to create _navbar folder.\n";
                    }
                }

                // Create the navbar.php file and write the extracted content
                $navbarFile = $navbarFolder . "\\navbar.php";
                if (file_put_contents($navbarFile, $matches[1])) {
                    echo "navbar.php file created successfully inside the _navbar folder.\n";
                } else {
                    echo "Failed to create navbar.php file.\n";
                }
            } else {
                echo "No content found between @navbar markers.\n";
            }
        } else {
            echo "The index.html file does not exist.\n";
        }

        // _sidebar folder path
        $sidebarFolder = __DIR__ . "\\resources\\views\\pages\\_sidebar";

        // Check if the index file exists
        if (file_exists($indexFile)) {
            // Read the content of index.html
            $fileContent = file_get_contents($indexFile);

            // Use regular expression to extract content between @header markers
            if (preg_match('/@sidebar(.*?)@sidebar/s', $fileContent, $matches)) {
                // $matches[1] will contain the content between the @header markers

                // Create the _header folder if it doesn't exist
                if (!is_dir($sidebarFolder)) {
                    if (mkdir($sidebarFolder, 0777, true)) {
                        echo "_sidebar folder created successfully.\n";
                    } else {
                        echo "Failed to create _sidebar folder.\n";
                    }
                }

                // Create the sidebar.php file and write the extracted content
                $sidebarFile = $sidebarFolder . "\\sidebar.php";
                if (file_put_contents($sidebarFile, $matches[1])) {
                    echo "sidebar.php file created successfully inside the _sidebar folder.\n";
                } else {
                    echo "Failed to create sidebar.php file.\n";
                }
            } else {
                echo "No content found between @sidebar markers.\n";
            }
        } else {
            echo "The index.html file does not exist.\n";
        }


        // _body folder path
        $bodyFolder = __DIR__ . "\\resources\\views\\pages\\home";

        // Check if the index file exists
        if (file_exists($indexFile)) {
            // Read the content of index.html
            $fileContent = file_get_contents($indexFile);

            // Use regular expression to extract content between @header markers
            if (preg_match('/@body(.*?)@body/s', $fileContent, $matches)) {
                // $matches[1] will contain the content between the @header markers

                // Create the _header folder if it doesn't exist
                if (!is_dir($bodyFolder)) {
                    if (mkdir($bodyFolder, 0777, true)) {
                        echo "Home folder created successfully.\n";
                    } else {
                        echo "Failed to create Home folder.\n";
                    }
                }

                // Create the body.php file and write the extracted content
                $bodyFile = $bodyFolder . "\\home.php";
                if (file_put_contents($bodyFile, $matches[1])) {
                    echo "home.php file created successfully inside the home folder.\n";
                } else {
                    echo "Failed to create home.php file.\n";
                }
            } else {
                echo "No content found between @body markers.\n";
            }
        } else {
            echo "The index.html file does not exist.\n";
        }

        // home JS folder creation
        $homeFolder = __DIR__ . "\\resources\\views\\pages\\home\\js";
        echo "Creating Home JS file file...\n";
        if (!is_dir($homeFolder)) {
            if (mkdir($homeFolder, 0777, true)) {
                echo "Home JS file created successfully.\n";
            } else {
                echo "Failed to create Home JS file.\n";
            }
        } else {
            echo "Home JS file already exists.\n";
        }
        // home JS folder path
        $homeJSFolder = __DIR__ . "\\resources\\views\\pages\\home\\js";
        // Create the home.js file and write the extracted content
        $homeJSFile = $homeJSFolder . "\\home.js";
        if (file_put_contents($homeJSFile, "// JavaScript for home page")) {
            echo "home.js file created successfully inside the home/js folder.\n";
        } else {
            echo "Failed to create home.js file.\n";
        }

        // home css folder creation
        $homeFolder = __DIR__ . "\\resources\\views\\pages\\home\\css";
        echo "Creating Home css file file...\n";
        if (!is_dir($homeFolder)) {
            if (mkdir($homeFolder, 0777, true)) {
                echo "Home css file created successfully.\n";
            } else {
                echo "Failed to create Home css file.\n";
            }
        } else {
            echo "Home css file already exists.\n";
        }
        // home css folder path
        $homecssFolder = __DIR__ . "\\resources\\views\\pages\\home\\css";
        // Create the home.css file and write the extracted content
        $homecssFile = $homecssFolder . "\\home.css";
        if (file_put_contents($homecssFile, ' /* Styles for home page */ ')) {
            echo "home.css file created successfully inside the home/css folder.\n";
        } else {
            echo "Failed to create home.js file.\n";
        }



        // Add final configurations

        // HEADER
        $headerFile = __DIR__ . "\\resources\\views\\pages\\_header\\header.php";
        // The content to prepend
        $preContent = "<?php require __DIR__ . \"/../../../../app/models/LoadModel.php\"; ?>\n";
        // Check if the header.php file exists
        if (file_exists($headerFile)) {
            // Read the current content of the file
            $currentContent = file_get_contents($headerFile);

            // Prepend the new content to the existing content
            $newContent = $preContent . $currentContent;

            // Write the new content back to the file
            if (file_put_contents($headerFile, $newContent)) {
                echo "Successfully added the configuration at the beginning of header.php.\n";
            } else {
                echo "Failed to update header.php.\n";
            }
        } else {
            echo "The header.php file does not exist.\n";
        }
        // Check if the header.php file exists
        if (file_exists($headerFile)) {
            // Read the content of the header.php file
            $content = file_get_contents($headerFile);

            // Use regular expression to find all <link> tags and modify the href
            $content = preg_replace_callback('/<link[^>]*href="([^"]+)"/', function ($matches) {
                // The original href value
                $originalHref = $matches[1];

                // Modify the href by prepending the base URL
                $modifiedHref = '<?php echo EnvModel::env("APP_BASE_URL") ?>resources/views/' . $originalHref;

                // Replace the href in the <link> tag with the modified href
                return str_replace($originalHref, $modifiedHref, $matches[0]);
            }, $content);

            // Write the modified content back to the header.php file
            if (file_put_contents($headerFile, $content)) {
                echo "Successfully updated the href in <link> tags.\n";
            } else {
                echo "Failed to update the header.php file.\n";
            }
        } else {
            echo "The header.php file does not exist.\n";
        }

        // Check if the header.php file exists
        if (file_exists($headerFile)) {
            // Read the current content of the file
            $content = file_get_contents($headerFile);

            // Regular expression to find the <title> tag and replace its content
            $content = preg_replace('/<title[^>]*>.*<\/title>/i', '<title id="page_title"></title>', $content);

            // Write the modified content back to the file
            if (file_put_contents($headerFile, $content)) {
                echo "Successfully updated the title tag in header.php.\n";
            } else {
                echo "Failed to update the header.php file.\n";
            }
        } else {
            echo "The header.php file does not exist.\n";
        }

        // FOOTER
        $footerFile = __DIR__ . "\\resources\\views\\pages\\_footer\\footer.php";
        // The content to prepend
        $preContent = "<script>\n
                            // Page Title Definition \n
                            document.querySelector('#page_title').innerHTML = <?php echo json_encode(PagesTitleModel::getTitle()); ?>\n
                        </script>";
        // Check if the footer.php file exists
        if (file_exists($footerFile)) {
            // Read the current content of the file
            $currentContent = file_get_contents($footerFile);

            // Prepend the new content to the existing content
            $newContent = $preContent . $currentContent;

            // Write the new content back to the file
            if (file_put_contents($footerFile, $newContent)) {
                echo "Successfully added the configuration at the beginning of footer.php.\n";
            } else {
                echo "Failed to update footer.php.\n";
            }
        } else {
            echo "The footer.php file does not exist.\n";
        }
        // Check if the footer.php file exists
        if (file_exists($footerFile)) {
            // Read the content of the footer.php file
            $content = file_get_contents($footerFile);

            // Use regular expression to find all <link> tags and modify the href
            $content = preg_replace_callback('/<script[^>]*src="([^"]+)"/', function ($matches) {
                // The original href value
                $originalHref = $matches[1];

                // Modify the href by prepending the base URL
                $modifiedHref = '<?php echo EnvModel::env("APP_BASE_URL") ?>resources/views/' . $originalHref;

                // Replace the href in the <link> tag with the modified href
                return str_replace($originalHref, $modifiedHref, $matches[0]);
            }, $content);

            // Write the modified content back to the footer.php file
            if (file_put_contents($footerFile, $content)) {
                echo "Successfully updated the src in <script> tags.\n";
            } else {
                echo "Failed to update the footer.php file.\n";
            }
        } else {
            echo "The footer.php file does not exist.\n";
        }



        // HOMEPAGE
        $homeFile = __DIR__ . "\\resources\\views\\pages\\home\\home.php";
        // The content to prepend
        $preContent = "<?php include __DIR__ . '/../_header/header.php'; ?>\n
<!-- Page Title -->\n
<?php PagesTitleModel::title('Maxiter - Home Page'); ?>\n
<link rel='stylesheet' href='<?php echo EnvModel::env('APP_BASE_URL') ?>resources/views/pages/home/css/home.css'>\n";
        // Check if the home.php file exists
        if (file_exists($homeFile)) {
            // Read the current content of the file
            $currentContent = file_get_contents($homeFile);

            // Prepend the new content to the existing content
            $newContent = $preContent . $currentContent;

            // Write the new content back to the file
            if (file_put_contents($homeFile, $newContent)) {
                echo "Successfully added the configuration at the beginning of home.php.\n";
            } else {
                echo "Failed to update home.php.\n";
            }
        } else {
            echo "The home.php file does not exist.\n";
        }
        // The content to append
        $appendContent = "<script src='<?php echo EnvModel::env('APP_BASE_URL') ?>resources/views/pages/home/js/home.js'></script>\n
<?php include __DIR__ . '/../_footer/footer.php'; ?>";

        // Check if the home.php file exists
        if (file_exists($homeFile)) {
            // Read the current content of the file
            $currentContent = file_get_contents($homeFile);

            // Append the new content to the existing content
            $newContent = $currentContent . $appendContent;

            // Write the new content back to the file
            if (file_put_contents($homeFile, $newContent)) {
                echo "Successfully added the configuration at the end of home.php.\n";
            } else {
                echo "Failed to update home.php.\n";
            }
        } else {
            echo "The home.php file does not exist.\n";
        }

        // All SRC or URL IMAGE HOMEPAGE
        // Check if the home.php file exists
        if (file_exists($homeFile)) {
            // Read the current content of the file
            $content = file_get_contents($homeFile);

            // Regular expression to find and modify img src paths
            $content = preg_replace_callback('/<img[^>]*src=["\']([^"\']+)["\']/i', function ($matches) {
                $originalSrc = $matches[1];  // The original src value
                // Check if the path is relative (i.e., not starting with "http" or "//")
                if (strpos($originalSrc, 'http') === false && strpos($originalSrc, '//') === false) {
                    // Prepend the base URL and resources/views/ to the src path
                    $modifiedSrc = '<?php echo EnvModel::env(\'APP_BASE_URL\') ?>resources/views/' . $originalSrc;
                    return str_replace($originalSrc, $modifiedSrc, $matches[0]);
                }
                // If the src is already an absolute URL, return it unchanged
                return $matches[0];
            }, $content);

            // Regular expression to find and modify background-image url() paths
            $content = preg_replace_callback('/background-image:\s*url\(["\']?([^"\')]+)["\']?\)/i', function ($matches) {
                $originalUrl = $matches[1];  // The original URL in the background-image
                // Check if the path is relative
                if (strpos($originalUrl, 'http') === false && strpos($originalUrl, '//') === false) {
                    // Prepend the base URL and resources/views/ to the background-image URL
                    $modifiedUrl = 'url(<?php echo EnvModel::env(\'APP_BASE_URL\') ?>resources/views/' . $originalUrl . ')';
                    // Replace only the part inside the url() function with the modified URL
                    return preg_replace('/url\(["\']?([^"\')]+)["\']?\)/', $modifiedUrl, $matches[0]);
                }
                // If the URL is already absolute, return it unchanged
                return $matches[0];
            }, $content);

            // Regular expression to find and modify img src paths
            $content = preg_replace_callback('/<source[^>]*src=["\']([^"\']+)["\']/i', function ($matches) {
                $originalSrc = $matches[1];  // The original src value
                // Check if the path is relative (i.e., not starting with "http" or "//")
                if (strpos($originalSrc, 'http') === false && strpos($originalSrc, '//') === false) {
                    // Prepend the base URL and resources/views/ to the src path
                    $modifiedSrc = '<?php echo EnvModel::env(\'APP_BASE_URL\') ?>resources/views/' . $originalSrc;
                    return str_replace($originalSrc, $modifiedSrc, $matches[0]);
                }
                // If the src is already an absolute URL, return it unchanged
                return $matches[0];
            }, $content);

            // Write the modified content back to the file
            if (file_put_contents($homeFile, $content)) {
                echo "Successfully updated the src and background-image paths in home.php.\n";
            } else {
                echo "Failed to update the home.php file.\n";
            }
        } else {
            echo "The home.php file does not exist.\n";
        }

        // All SRC or URL IMAGE FOOTER
        $footerFile = __DIR__ . "\\resources\\views\\pages\\_footer\\footer.php";
        // Check if the footer.php file exists
        if (file_exists($footerFile)) {
            // Read the current content of the file
            $content = file_get_contents($footerFile);

            // Regular expression to find and modify img src paths
            $content = preg_replace_callback('/<img[^>]*src=["\']([^"\']+)["\']/i', function ($matches) {
                $originalSrc = $matches[1];  // The original src value
                // Check if the path is relative (i.e., not starting with "http" or "//")
                if (strpos($originalSrc, 'http') === false && strpos($originalSrc, '//') === false) {
                    // Prepend the base URL and resources/views/ to the src path
                    $modifiedSrc = '<?php echo EnvModel::env(\'APP_BASE_URL\') ?>resources/views/' . $originalSrc;
                    return str_replace($originalSrc, $modifiedSrc, $matches[0]);
                }
                // If the src is already an absolute URL, return it unchanged
                return $matches[0];
            }, $content);

            // Regular expression to find and modify background-image url() paths
            $content = preg_replace_callback('/background-image:\s*url\(["\']?([^"\')]+)["\']?\)/i', function ($matches) {
                $originalUrl = $matches[1];  // The original URL in the background-image
                // Check if the path is relative
                if (strpos($originalUrl, 'http') === false && strpos($originalUrl, '//') === false) {
                    // Prepend the base URL and resources/views/ to the background-image URL
                    $modifiedUrl = 'url(<?php echo EnvModel::env(\'APP_BASE_URL\') ?>resources/views/' . $originalUrl . ')';
                    // Replace only the part inside the url() function with the modified URL
                    return preg_replace('/url\(["\']?([^"\')]+)["\']?\)/', $modifiedUrl, $matches[0]);
                }
                // If the URL is already absolute, return it unchanged
                return $matches[0];
            }, $content);

            // Write the modified content back to the file
            if (file_put_contents($footerFile, $content)) {
                echo "Successfully updated the src and background-image paths in footer.php.\n";
            } else {
                echo "Failed to update the footer.php file.\n";
            }
        } else {
            echo "The footer.php file does not exist.\n";
        }





    }


    // Helper function to copy the contents of a subfolder (recursively)
    private function copyDirectoryContents($sourceDir, $destinationDir)
    {
        // Get the files and folders inside the source directory
        $items = scandir($sourceDir);

        // Iterate over the items in the subfolder
        foreach ($items as $item) {
            if ($item != '.' && $item != '..') {
                $sourcePath = $sourceDir . '\\' . $item;
                $destinationPath = $destinationDir . '\\' . $item;

                if (is_dir($sourcePath)) {
                    // If it's a directory, create it in the destination and copy its contents
                    if (!is_dir($destinationPath)) {
                        mkdir($destinationPath, 0777, true);
                    }
                    // Recursively copy the contents of the subfolder
                    $this->copyDirectoryContents($sourcePath, $destinationPath);
                } else {
                    // If it's a file, copy it
                    copy($sourcePath, $destinationPath);
                    echo "File '$item' copied successfully!\n";
                }
            }
        }
    }



    // ############################################################################ //
    // ############################################################################ //
    // ############################ SET NEW TEMPLATE ############################## //
    // ############################################################################ //
    // ############################################################################ //



    public function generateApiController($fileName)
    {
        $path = __DIR__ . '/app/controllers/' . $fileName . ".php";

        // Content to be written to the file
        $content = "<?php\n" .
            "/*\n" .
            "The API controller file handles user input and interaction. It processes requests,\n" .
            "invokes business logic, and returns as needed.\n" .
            "\n" .
            "@author Victor Béser\n" .
            "*/\n" .
            "class " . ucfirst($fileName) . " {\n\n" .
            "    public function main() {\n" .
            "        // Your code here\n" .
            "    }\n\n" .
            "}\n\n" .
            "\$controller = new " . ucfirst($fileName) . "();";

        // Create the /app directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app');
        // Create the /app/controllers directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app/controllers');

        // Check if the file already exists
        if (file_exists($path)) {
            echo "This controller already exists\n";
        } else {
            // Create the file and write the content
            file_put_contents($path, $content);
            echo "Controller $fileName created\n";
        }
    }

    public function generateMiddleware($fileName)
    {
        $path = __DIR__ . '/app/middlewares/' . $fileName . ".php";

        // Content to be written to the file
        $content = "<?php\n" .
            "/*\n" .
            "A middleware is a function that processes incoming requests \n" .
            "before they reach the main application or route handler.\n" .
            "It can modify requests, responses, or handle tasks like\n" .
            "authentication, logging, and error handling.\n" .
            "\n" .
            "@author Victor Béser\n" .
            "*/\n" .
            "require __DIR__ . '/../models/LoadModel.php';\n\n" .
            "class " . ucfirst($fileName) . " {\n\n" .
            "    public static function handle() {\n" .
            "        // Your code here\n" .
            "    }\n\n" .
            "}";

        // Create the /app directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app');
        // Create the /app/controllers directory if it doesn't exist
        $this->createDirectory(__DIR__ . '/app/middlewares');

        // Check if the file already exists
        if (file_exists($path)) {
            echo "This middleware already exists\n";
        } else {
            // Create the file and write the content
            file_put_contents($path, $content);
            echo "Middleware $fileName created\n";
        }
    }


    private function createDirectory($dir)
    {
        if (!file_exists($dir)) {
            mkdir($dir, 0777, true);
        }
    }
}

// Check if arguments were passed
if ($argc < 2) {

    echo
        "\nMaxiter CLI usage\n" .
        "\n" .
        "php maxiter new controller         #Create a new controller file in /app/controllers/\n" .
        "php maxiter new model              #Create a new model file in /app/models/\n" .
        "php maxiter new view               #Create a new view folder and files in /resources/views/pages/\n" .
        "php maxiter new log                #Create a basic LogModel to use in your application\n" .
        "php maxiter new table              #Create a SQL file in /src/tables/\n" .
        "php maxiter config                 #Is something broke? Try this!\n" .
        "php maxiter server [port]          #Initiate a PHP server using the default port 7000 if port argument is empty\n" .
        "php maxiter path                   #Configure the path url of your project, main path: http://localhost/\n" .
        "php maxiter new template           #Configure a new template in your project\n" .
        "php maxiter new api                #Create a new API controller file in /app/controllers/\n" .
        "php maxiter new middleware         #Create a new middleware file in /app/middlewares/\n" .
        "php maxiter gui                    #Open Maxiter GUI in browser\n\n"
    ;

    exit(1);
}

// Instantiate the MaxiterConfiguration class
$config = new MaxiterConfiguration();

// Check if the second argument is 'new' and the third is 'controller'
if ($argv[1] === 'new' && $argv[2] === 'controller') {
    if (!isset($argv[3]) || empty($argv[3])) {
        echo "Error: php maxiter new controller [controller_name]";
        exit();
    }
    $config->generateController($argv[3]);
} else if ($argv[1] === 'new' && $argv[2] === 'model') {
    if (!isset($argv[3]) || empty($argv[3])) {
        echo "Error: php maxiter new model [model_name]";
        exit();
    }
    $config->generateModel($argv[3]);
} else if ($argv[1] === 'new' && $argv[2] === 'view') {
    if (!isset($argv[3]) || empty($argv[3])) {
        echo "Error: php maxiter new view [view_name] [optional: template_name]";
        exit();
    }
    if (isset($argv[4])) {
        $config->generatePage($argv[3], $argv[4]);
    } else {
        $config->generatePage($argv[3]);
    }
} else if ($argv[1] === 'new' && $argv[2] === 'log') {

    if (!isset($argv[3]) || empty($argv[3])) {
        echo "Error: php maxiter new log [database]";
        exit();
    }
    $config->generateLogModel($argv[3]);
} else if ($argv[1] === 'new' && $argv[2] === 'table') {
    if (!isset($argv[3]) || empty($argv[3])) {
        echo "Error: php maxiter new table [table_name]";
        exit();
    }
    $config->generateSQL($argv[3]);
} else if ($argv[1] === 'server') {
    if (!isset($argv[2]) || empty($argv[2])) {
        $config->initServer();
    } else {
        $config->initServer($argv[2]);
    }
} else if ($argv[1] === 'gui') {
    if (!isset($argv[2]) || empty($argv[2])) {
        $config->initGUI();
    }
} else if ($argv[1] === 'path') {
    if (!isset($argv[2]) || empty($argv[2])) {
        echo "Error: php maxiter path [base_url_path] || Example: php maxiter path http://localhost/maxiter/ * Don't forget the / at the end!";
        exit();
    }
    $config->setPath($argv[2]);
} else if ($argv[1] === 'new' && $argv[2] === 'template') {
    if (!isset($argv[3]) || empty($argv[3])) {
        echo "Error: php maxiter new template [template_folder_name]";
        exit();
    }

    echo "Warning! This will erase all your actual /views data and set up a new configuration using the template in src/template/" . $argv[3] . ".";
    $config->setNewTemplate($argv[3]);
    // $handle = fopen("php://stdin", "r");
    // $response = trim(fgets($handle));  
    // fclose($handle);
    // if (strtolower($response) === 'y' || strtolower($response) === 'yes') {
    //     $config->setNewTemplate($argv[3]);
    // } else {
    //     echo "Operation cancelled.";
    // }
} else if ($argv[1] === 'new' && $argv[2] === 'api') {
    if (!isset($argv[3]) || empty($argv[3])) {
        echo "Error: php maxiter new api [api_controller_name]";
        exit();
    }
    $config->generateApiController($argv[3]);
} else if ($argv[1] === 'new' && $argv[2] === 'middleware') {
    if (!isset($argv[3]) || empty($argv[3])) {
        echo "Error: php maxiter new middleware [middleware_name]";
        exit();
    }
    $config->generateMiddleware($argv[3]);
} else {
    echo "Command not found\n";
}
